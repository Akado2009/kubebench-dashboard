{"version":3,"sources":["components/Header.jsx","actions/index.js","components/GenerateFromYaml.jsx","components/GenerateFromParameters.jsx","components/JobInfo.jsx","components/Watch.jsx","components/App.jsx","serviceWorker.js","reducers/index.js","sagas/index.js","index.js","store/index.js"],"names":["withStyles","root","flexGrow","grow","props","classes","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","closeSnack","type","connect","state","yaml","loading","snackOpen","snackText","changeYaml","submitWholeYaml","theme","width","margin","editor","submit","textAlign","button","spacing","unit","progress","height","close","padding","LinearProgress_default","lib_default","mode","value","onChange","name","editorProps","$blockScrolling","tabSize","enableLiveAutocompletion","fontSize","Button_default","disabled","onClick","Snackbar_default","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","message","id","action","IconButton_default","key","aria-label","Close_default","parameters","changeParameters","submitYamlParameters","textField","marginLeft","marginRight","help","verticalAlign","map","param","i","Grid_default","container","item","xs","sm","Tooltip_default","title","description","HelpOutline_default","TextField_default","event","target","paper","backgroundColor","palette","background","boxShadow","shadows","modal","top","left","Modal_default","aria-labelledby","aria-describedby","links","link","href","concat","submitYaml","Watch","_this","openModal","_this2","this","List_default","component","jobs","job","icon","status","Schedule_default","running","HighlightOff_default","failed","Done_default","finished","ListItem_default","ListItemIcon_default","ListItemText_default","inset","primary","components_JobInfo","closeModal","modalOpen","delete","deleteJob","React","Component","jobsList","currentId","current","currentName","currentLinks","paddingTop","components_Header","Link","to","Route","exact","path","GenerateFromYaml","GenerateFromParameters","Boolean","window","location","hostname","match","initialState","rootReducer","obj","arguments","length","undefined","Object","objectSpread","params","slice","findIndex","p","rootSaga","regenerator_default","wrap","_context","prev","next","all","stop","_marked","store","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","logger","runSaga","run","dispatch","END","configureStore","createMuiTheme","main","secondary","ReactDOM","render","es","BrowserRouter","styles","CssBaseline_default","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f56bd0b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst styles = {\n    root: {\n        flexGrow: 1,\n    },\n    grow: {\n        flexGrow: 1,\n    },\n};\n\nconst Header = (props) => {\n    const { classes } = props;\n\n    return (\n        <div className={classes.root}>\n            <AppBar position={\"static\"} color={\"primary\"}>\n                <Toolbar>\n                    <Typography variant={\"display1\"} color={\"inherit\"} className={classes.grow}>\n                        <strong>KB Dashboard</strong>\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n};\n\nHeader.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Header);","export const CHANGE_YAML = \"CHANGE_YAML\";\n\nexport const CLOSE_SNACK = \"CLOSE_SNACK\";\n\nexport const SELECT_JOB = \"SELECT_JOB\";\nexport const CLOSE_SELECT_JOB = \"CLOSE_SELECT_JOB\";\n\nexport const DEPLOY_SUBMIT = \"DEPLOY_SUBMIT\";\nexport const DEPLOY_SUCCESS = \"DEPLOY_SUCCESS\";\nexport const DEPLOY_FAILURE = \"DEPLOY_FAILURE\";\n\nexport const DEPLOY_PARAM_SUBMIT = \"DEPLOY_PARAM_SUBMIT\";\nexport const DEPLOY_PARAM_SUCCESS = \"DEPLOY_PARAM_SUCCESS\";\nexport const DEPLOY_PARAM_FAILURE = \"DEPLOY_PARAM_FAILURE\";\n\nexport const DELETE_SUBMIT = \"DELETE SUBMIT\";\nexport const DELETE_SUCCESS = \"DELETE_SUCCESS\";\nexport const DELETE_FAILURE = \"DELETE_FAILURE\";\n\nexport const CHANGE_PARAMETER = \"CHANGE_PARAMETER\";\n\n\nexport const changeYaml = (yaml) => {\n    return {\n        type: CHANGE_YAML,\n        yaml: yaml,\n    };\n};\n\nexport const changeParameters = (name, value) => {\n    return {\n        type: CHANGE_PARAMETER,\n        name,\n        value,\n    };\n};\n\nexport const submitWholeYaml = () => {\n    return {\n        type: DEPLOY_SUBMIT,\n        loading: true,\n    };\n};\n\nexport const submitYamlParameters = () => {\n    return {\n        type: DEPLOY_PARAM_SUBMIT,\n        loading: true,\n    };\n};\n\nexport const closeSnack =() => {\n    return {\n        type: CLOSE_SNACK,\n    };\n};\n\nexport const openModal = (id) => {\n    return {\n        type: SELECT_JOB,\n        id,\n    };\n};\n\nexport const closeModal = () => {\n    return {\n        type: CLOSE_SELECT_JOB,\n    };\n};\n\nexport const deleteJob = (id) => {\n    return {\n        type: DELETE_SUBMIT,\n        id,\n    };\n};\n\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { changeYaml, submitWholeYaml, closeSnack } from '../actions';\n\nimport brace from 'brace';\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\nimport AceEditor from 'react-ace';\nimport Button from '@material-ui/core/Button';\n\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\n\n\nconst styles = theme => ({\n    root: {\n        width: '90%',\n        margin: '0 auto',\n    },\n    editor: {\n        margin: '0 auto',\n    },\n    submit: {\n        textAlign: 'center',\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n    progress: {\n        height: 10,\n        margin: 10,\n    },\n    close: {\n        padding: theme.spacing.unit / 2,\n    },\n});\n\n\nconst GenerateFromYaml = (props) => {\n\n    const onYamlChange = (value) => {\n        props.changeYaml(value);\n    };\n\n    const { classes } = props;\n    return (\n        <div className={classes.root}>\n            <h1>Generate</h1>\n            <hr />\n            {props.loading && <LinearProgress className={classes.progress}/>}\n            <div className={classes.editor}>\n                <AceEditor\n                    mode=\"javascript\"\n                    theme=\"tomorrow\"\n                    value={props.yaml}\n                    onChange={onYamlChange}\n                    name=\"UNIQUE_ID_OF_DIV\"\n                    editorProps={{$blockScrolling: true}}\n                    tabSize={2}\n                    enableLiveAutocompletion={true}\n                    fontSize={14}\n                    width={'100%'}\n                    height={700}\n                />\n            </div>\n            <div className={classes.submit}>\n                <Button variant=\"contained\" disabled={props.loading} color={\"primary\"} className={classes.button} onClick={props.submitWholeYaml}>\n                    Deploy\n                </Button>\n            </div>\n\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                open={props.snackOpen}\n                autoHideDuration={6000}\n                onClose={props.closeSnack}\n                message={<span id=\"message-id\">{props.snackText}</span>}\n                action={[\n                    <IconButton\n                        key=\"close\"\n                        aria-label=\"Close\"\n                        color=\"inherit\"\n                        className={classes.close}\n                        onClick={props.closeSnack}\n                    >\n                        <CloseIcon />\n                    </IconButton>,\n                ]}\n            />\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        yaml: state.yaml,\n        loading: state.loading,\n        snackOpen: state.snackOpen,\n        snackText: state.snackText,\n    };\n};\n\nGenerateFromYaml.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default connect(mapStateToProps, { changeYaml, submitWholeYaml, closeSnack })(withStyles(styles)(GenerateFromYaml));","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { closeSnack, changeParameters, submitYamlParameters } from '../actions';\n\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport Button from \"@material-ui/core/Button\";\n\n\nconst styles = theme => ({\n    root: {\n        width: '90%',\n        margin: '0 auto',\n    },\n    editor: {\n        margin: '0 auto',\n    },\n    submit: {\n        textAlign: 'center',\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n    progress: {\n        height: 10,\n        margin: 10,\n    },\n    close: {\n        padding: theme.spacing.unit / 2,\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n        width: '100%'\n    },\n    help: {\n        padding: theme.spacing.unit / 2,\n        verticalAlign: \"middle\",\n    },\n});\n\n\nconst GenerateFromParameters = (props) => {\n\n    const onYamlChange = (value) => {\n        props.changeYaml(value);\n    };\n\n    const onFieldChange = (name) => (event) => {\n        return props.changeParameters(name, event.target.value);\n    };\n\n    const { classes } = props;\n\n    return (\n        <div className={classes.root}>\n            <h1>Generate from parameters</h1>\n            <hr />\n            {props.loading && <LinearProgress className={classes.progress}/>}\n            {\n                props.parameters.map((param, i) => {\n                return (\n                    <div key={i}>\n                        <Grid container>\n                            <Grid item xs={12} sm={3}>\n                                <Typography>\n                                    <Tooltip title={param.description}>\n                                        <HelpOutlineIcon className={classes.help} color={\"primary\"}/>\n                                    </Tooltip>\n                                    {param.name}\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} sm={8}>\n                                <TextField\n                                    className={classes.textField}\n                                    value={param.value}\n                                    onChange={onFieldChange(param.name)}\n                                    />\n                            </Grid>\n                        </Grid>\n                    </div>\n                )\n                })\n            }\n            <div className={classes.submit}>\n                <Button variant=\"contained\" disabled={props.loading} color={\"primary\"} className={classes.button} onClick={props.submitYamlParameters}>\n                    Deploy\n                </Button>\n            </div>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                open={props.snackOpen}\n                autoHideDuration={6000}\n                onClose={props.closeSnack}\n                message={<span id=\"message-id\">{props.snackText}</span>}\n                action={[\n                    <IconButton\n                        key=\"close\"\n                        aria-label=\"Close\"\n                        color=\"inherit\"\n                        className={classes.close}\n                        onClick={props.closeSnack}\n                    >\n                        <CloseIcon />\n                    </IconButton>\n                ]}\n            />\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        loading: state.loading,\n        snackOpen: state.snackOpen,\n        snackText: state.snackText,\n        parameters: state.parameters,\n    };\n};\n\nGenerateFromParameters.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default connect(mapStateToProps, { closeSnack, changeParameters, submitYamlParameters })(withStyles(styles)(GenerateFromParameters));","import React from 'react';\nimport Modal from '@material-ui/core/Modal';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from \"@material-ui/core/Button\";\n\n\nconst styles = theme => ({\n    paper: {\n        position: 'absolute',\n        width: theme.spacing.unit * 50,\n        backgroundColor: theme.palette.background.paper,\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing.unit * 4,\n    },\n    modal: {\n        top: '40%',\n        left: '40%',\n    }\n});\n\n\nconst JobInfo = (props) => {\n    const { classes } = props;\n\n    return (\n        <Modal\n            aria-labelledby=\"simple-modal-title\"\n            aria-describedby=\"simple-modal-description\"\n            open={props.open}\n            onClose={props.close}\n            className={classes.modal}\n        >\n            <div className={classes.paper}>\n                <Typography variant=\"h6\" id=\"modal-title\">\n                    { props.name }\n                </Typography>\n                <Typography variant=\"subtitle1\" id=\"simple-modal-description\">\n                    <ul>\n                    { props.links.map((link, i) => {\n                        return (\n                            <li key={i}><a href={`${link}`}>{link}</a></li>\n                        )\n                    })}\n                    </ul>\n                </Typography>\n                <Button variant=\"contained\" color={\"primary\"} className={classes.button} onClick={props.submitYaml}>\n                    Delete\n                </Button>\n            </div>\n        </Modal>\n    );\n};\n\nJobInfo.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(JobInfo);","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ScheduleIcon from '@material-ui/icons/Schedule';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport DoneIcon from '@material-ui/icons/Done';\n\nimport { openModal, closeModal, deleteJob } from \"../actions\";\n\nimport JobInfo from './JobInfo'\n\nconst styles = theme => ({\n    root: {\n        width: '90%',\n        margin: '0 auto',\n    },\n    running: {\n        color: '#8b8ffb',\n    },\n    failed: {\n        color: '#f26363',\n    },\n    finished: {\n        color: '#63f291',\n    }\n});\n\n\nclass Watch extends React.Component {\n    componentDidMount() {\n\n    }\n\n    open = (id) => event => {\n        this.props.openModal(id);\n    }\n\n    render () {\n        const { classes } = this.props;\n        return (\n            <div className={classes.root}>\n                <h1>Watch</h1>\n                <hr />\n                <List component=\"nav\">\n                    {this.props.jobs.map((job, i) => {\n                        let icon;\n                        if (job.status === 'running') {\n                            icon = (<ScheduleIcon className={classes.running}/>)\n                        } else if (job.status === 'failed') {\n                            icon = (<HighlightOffIcon className={classes.failed}/>)\n                        } else {\n                            icon = (<DoneIcon className={classes.finished}/>)\n                        }\n                        return (\n                            <ListItem button key={i} onClick={this.open(i)}>\n                                <ListItemIcon>\n                                    {icon}\n                                </ListItemIcon>\n                                <ListItemText inset primary={job.name} />\n                            </ListItem>\n                        );\n                    })}\n                </List>\n                <JobInfo\n                    close={this.props.closeModal}\n                    open={this.props.modalOpen}\n                    name={this.props.name}\n                    delete={this.props.deleteJob}\n                    links={this.props.links}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        jobs: state.jobsList,\n        modalOpen: state.modalOpen,\n        currentId: state.current,\n        name: state.currentName,\n        links: state.currentLinks,\n    };\n};\n\nWatch.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default connect(mapStateToProps, { openModal, closeModal, deleteJob })(withStyles(styles)(Watch));","import React  from 'react';\nimport Header from './Header';\nimport PropTypes from 'prop-types';\n\nimport { withStyles } from '@material-ui/core/styles';\n\nimport GenerateFromYaml from './GenerateFromYaml';\nimport GenerateFromParameters from './GenerateFromParameters';\nimport Watch from './Watch';\n\nimport  { Route, Link } from 'react-router-dom';\n\n\nconst styles = {\n    root: {\n        width: '90%',\n        margin: '0 auto',\n        paddingTop: 20,\n    }\n};\n\nconst App = (props) => {\n    const { classes } = props;\n    return (\n        <div className={classes.root}>\n            <Header />\n\n            <ul>\n                <li>\n                    <Link to=\"/\">Generate from YAML</Link>\n                </li>\n                <li>\n                    <Link to=\"/defaults\">Generate from parameters</Link>\n                </li>\n                <li>\n                    <Link to=\"/watch\">Watch</Link>\n                </li>\n            </ul>\n\n            <Route exact path=\"/\" component={GenerateFromYaml} />\n            <Route path=\"/defaults\" component={GenerateFromParameters} />\n            <Route path=\"/watch\" component={Watch} />\n        </div>\n    )\n};\n\nApp.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as ActionTypes from '../actions';\n// import { combineReducers } from 'redux';\n\nconst initialState = {\n    yaml: '',\n    loading: false,\n    snackOpen: false,\n    snackText: '',\n    jobsList: [\n        {\n            name: 'Job 1',\n            status: 'running',\n        },\n        {\n            name: 'Job 2',\n            status: 'failed',\n        },\n        {\n            name: 'Job 3',\n            status: 'finished',\n        }\n    ],\n    modalOpen: false,\n    currentId: null,\n    currentName: '',\n    currentLinks: ['First link', 'Second link'],\n    parameters: [\n        {\n            name: \"serviceAccount\",\n            value: \"default\",\n            description: \"The service account used to run the job\",\n        },\n        {\n            name: \"controllerImage\",\n            value: \"gcr.io/kubeflow-images-public/kubebench/kubebench-controller:3c75b50\",\n            description: \"Configurator image\",\n        },\n        {\n            name: \"githubTokenSecret\",\n            description: \"\",\n            value: \"GitHub token secret\",\n        },\n        {\n            name: \"githubTokenSecretKey\",\n            value: \"\",\n            description: \"Key of GitHub token secret\",\n        },\n        {\n            name: \"gcpCredentialsSecret\",\n            value: \"GCP credentials secret\",\n            description: \"\",\n        },\n        {\n            name: \"gcpCredentialsSecretKey\",\n            value: \"\",\n            description: \"Key of GCP credentials secret\",\n        },\n        {\n            name: \"mainJobKsPrototype\",\n            value: \"kubebench-example-tfcnn\",\n            description: \"The Ksonnet prototype of the job being benchmarked\",\n        },\n        {\n            name: \"mainJobKsPackage\",\n            value: \"kubebench-examples\",\n            description: \"The Ksonnet package of the job being benchmarked\",\n        },\n        {\n            name: \"mainJobKsRegistry\",\n            value: \"github.com/kubeflow/kubebench/tree/master/kubebench\",\n            description: \"The Ksonnet registry of the job being benchmarked\",\n        },\n        {\n            name: \"mainJobConfig\",\n            value: \"tf-cnn/tf-cnn-dummy.yaml\",\n            description: \"Path to the config of the benchmarked job\",\n        },\n        {\n            name: \"experimentConfigPvc\",\n            value: \"kubebench-config-pvc\",\n            description: \"Configuration PVC\",\n        },\n        {\n            name: \"experimentDataPvc\",\n            value: \"\",\n            description: \"Data PVC\",\n        },\n        {\n            name: \"experimentRecordPvc\",\n            value: \"kubebench-exp-pvc\",\n            description: \"Experiment PVC\",\n        },\n        {\n            name: \"postJobImage\",\n            value: \"gcr.io/kubeflow-images-public/kubebench/kubebench-example-tf-cnn-post-processor:3c75b50\",\n            description: \"Image of post processor\",\n        },\n        {\n            name: \"postJobArgs\",\n            value: \"\",\n            description: \"Arguments of post processor\",\n        },\n        {\n            name: \"reportType\",\n            value: \"csv\",\n            description: \"Type of reporter\",\n        },\n        {\n            name: \"csvReporterInput\",\n            value: \"result.json\",\n            description: \"The input of CSV reporter\",\n        },\n        {\n            name: \"csvReporterOutput\",\n            value: \"report.csv\",\n            description: \"The output of CSV reporter\",\n        }\n    ]\n};\n\nconst filterValue = (obj, key) => {\n    return obj.findIndex(p => p.name === key)\n};\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case ActionTypes.CHANGE_YAML:\n            return {\n                ...state,\n                yaml: action.yaml,\n            };\n        case ActionTypes.DEPLOY_SUBMIT:\n            return {\n                ...state,\n                loading: action.loading,\n                // snackOpen: true,\n                // snackText: 'Successfully deployed',\n            };\n        case ActionTypes.DEPLOY_PARAM_SUBMIT:\n            return {\n                ...state,\n                loading: action.loading,\n            };\n        case ActionTypes.CLOSE_SNACK:\n            return {\n                ...state,\n                snackOpen: false,\n            };\n        case ActionTypes.SELECT_JOB:\n            return {\n                ...state,\n                modalOpen: true,\n                currentId: action.id,\n                currentName: state.jobsList[action.id].name,\n            };\n        case ActionTypes.CLOSE_SELECT_JOB:\n            return {\n                ...state,\n                modalOpen: false,\n                currentId: action.id,\n            };\n        case ActionTypes.CHANGE_PARAMETER:\n            let params = state.parameters.slice();\n            let index = filterValue(params, action.name);\n            params[index].value = action.value;\n            return {\n                ...state,\n                parameters: params,\n            };\n        default:\n            return state;\n\n    }\n};\n\nexport default rootReducer;","import { take, put, call, fork, select, all, takeEvery } from 'redux-saga/effects';\nimport * as actions from '../actions';\n\n// const shittyOne = () => {\n//     return {\n//         type: 'REQUESTED_SHIT'\n//     }\n// };\n//\n// function* watchShitty() {\n//     yield takeEvery('REQUESTED_SHIT', shittyOneAsync);\n// }\n//\n// function* shittyOneAsync() {\n//     try {\n//         const data = yield call(() => {\n//             //send request here\n//             fetch('https://dog.ceo/api/breeds/image/random')\n//                 .then(res => res.json())\n//         })\n//\n//     }catch(error) {\n//         yield  put('SHIT');\n//     }\n// }\n\nexport default function* rootSaga() {\n    yield all([\n    ])\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport configureStore from './store';\nimport rootSaga from './sagas';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport { Provider } from 'react-redux';\n\n\nconst store = configureStore();\n\nstore.runSaga(rootSaga);\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#ab47bc',\n        },\n        secondary: {\n            main: '#cddc39',\n        },\n    },\n});\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <MuiThemeProvider theme={theme}>\n                <CssBaseline />\n                <App />\n            </MuiThemeProvider>\n        </Router>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport logger from 'redux-logger';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport rootReducer from '../reducers';\n\n\nexport default function configureStore(initialState) {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const store = createStore(\n        rootReducer,\n        initialState,\n        compose(\n            applyMiddleware(\n                sagaMiddleware,\n                logger\n            )\n        )\n    );\n\n    store.runSaga = sagaMiddleware.run;\n    store.close = () => store.dispatch(END);\n    return store;\n}"],"sourceRoot":""}